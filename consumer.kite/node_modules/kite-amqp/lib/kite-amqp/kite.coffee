{EventEmitter} = require 'events'
fs    = require "fs"
path  = require "path"
Kite  = require './index'

module.exports = class KiteBase extends EventEmitter

  __createAmqpConfig = (res) ->

    config =
      amqp          :
        port        : 5672
        protocol    : "amqp:"
        vhost       : '/'
        heartbeat   : 10

    config.amqp.port      = res.port if res?.port?
    config.amqp.host      = res.host if res?.host?
    config.amqp.protocol  = res.protocol if res?.protocol?
    config.amqp.login     = res.username if res?.username?
    config.amqp.password  = res.password if res?.password?
    config.amqp.vhost     = res.vhost if res?.vhost?
    config.amqp.heartbeat = res.heartbeat if res?.heartbeat?

    return config

  constructor:(config, functions, suspended=false)->
    @api = functions
    @config = config
    schema = config.apiAddress.split(":")[0]

    if schema == "https"
      client = require 'https'
    else
      client = require 'http'

    url = "#{config.apiAddress}/-/kite/login?key=#{config.key}&name=#{config.name}&username=#{config.username}&type=openservice"
    console.log "calling url:", url
    console.log "suspended......", suspended
    if not suspended
      @.on 'ready', ()=>
        @run()

    client.get url, (res) =>
      unless res.statusCode == 200
        console.log 'You can not start this Kite', res.statusCode
        return

      data = ""
      res.on "data", (chunk) ->
        data += chunk

      res.on "end", =>
        data = JSON.parse data
        @amqpconfig = __createAmqpConfig data
        @connectToDataStore(config, config.key)
        console.log "==========", config.key
        @kite = new Kite config.name, functions, config.key
        @emit 'ready'

      res.on "error", (e) ->
        console.log "Cannot start Kite #{e.message}"

  run: ()->
    @kite.on 'kite-ready', ()=>
      console.log "!!!! emitting ready"
      @emit 'running'
    @kite.run @amqpconfig, @config.key, @config

  connectToDataStore:(config)->
    if config.dataStore? and config.dataStore.enabled

      {DataStore, DataStoreFactory} = require 'kd-kite-datastore'
      DataStoreFactory.create config.dataStore.adapter, config.dataStore, (adapter)=>
        adapter.on "ready", ->
          adapter.getClient().set("foo", "bar")

        #@dataStore = new DataStore adapter
        #@dataStore.adapter.getClient().on "ready", ->
        #  this.set("foo", "bar")

  tellKite:(kite, callback)=>
    @kite.tellKite kite, callback

  call:(cmd, args, callback)->
    # this is a shortcut
    @api[cmd]?.call @kite, args, callback

  # Singleton Helpers
  @worker: (options, functions, suspended)=>
    options = @key options
    @instance or= new @ options, functions, suspended

  @require: (kiteName)=>
    run: (method, withArgs, callback)=>
      @instance.kite.tellKite {kiteName, method, withArgs}, callback

  @key: (manifest)=>
    KODING_KEY = path.join process.env.HOME, ".kd", "koding.key.pub"
    if fs.existsSync KODING_KEY
      try
        key = fs.readFileSync(KODING_KEY).toString().trim()
        manifest.key = key
        manifest.username or= manifest.author
        manifest.owner or= manifest.username
        manifest.name = "#{manifest.name}"
      catch error
        console.log error
        process.exit 1
    else
      console.log "You need to register this host using `kd register`, #{KODING_KEY}"
      process.exit 1
    manifest

  @server: (manifest, http, options = {})=>

    @instance = new @ (@key manifest), {}

    host = options.host or "127.0.0.1"
    {port} = options
    unless port > 0
      console.log "Finding a free port..."
      net     = require "net"
      server  = net.createServer()
      port    = 0
      server.on "listening", =>
        {port} = server.address()
        server.close()
      server.on "close", =>
        console.log "Server is running on http://#{host}:#{port}"
        console.log "PORT:#{port}"
        http.listen port, host
      server.listen 0
    else
      console.log "Server is running on http://#{host}:#{port}"
      console.log "PORT:#{port}"
      http.listen port, host

console.log "exporting...."

module.exports =
  worker  : KiteBase.worker
  require : KiteBase.require
  server  : KiteBase.server
