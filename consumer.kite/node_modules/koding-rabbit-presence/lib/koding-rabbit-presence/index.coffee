{EventEmitter} = require 'microemitter'

module.exports = class Presence extends EventEmitter

  [NOTREADY, READY] = [0, 1]

  EXCHANGE_OPTIONS =
    type        : 'x-presence'
    autoDelete  : yes
    durable     : no

  QUEUE_OPTIONS =
    autoDelete  : yes
    exclusive   : yes

  ACTIONS =
    bind        : 'join'
    unbind      : 'leave'

  constructor:({@connection, @member, exchange})->
    @exchangeName = exchange ? 'presence'
    @readyState   = NOTREADY
    @isListening  = no
    @declareExchange()

  ready:(callback)->
    if @readyState is READY then callback()
    else @once 'exchangeReady', callback

  declareExchange:->
    @connection.exchange @exchangeName, EXCHANGE_OPTIONS, (@exchange)=>
      @readyState = READY
      @emit 'exchangeReady'

  declareExclusiveQueue:(callback)->
    @connection.queue '', QUEUE_OPTIONS, callback

  announce:->
    @ready => @declareExclusiveQueue (queue)=>
      queue.bind @exchange, @member

  listen:->
    unless @isListening
      @ready => @declareExclusiveQueue (queue)=>
        queue.bind @exchange, ''
        queue.on 'queueBindOk', =>
          @isListening = yes
          queue.subscribe (message, {action, key})=>
            event = ACTIONS[action]
            @emit event, key  if event?

